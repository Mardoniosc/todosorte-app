{"version":3,"file":"common.d8ce84f8b19ba9ca.js","mappings":"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","names":["PerfilService","BaseResourceService","constructor","injector","super","this","i0","factory","PermissaoService","FormFieldErrorComponent","ngOnInit","errorMensage","mostraMensagemDeErro","getMessageError","formControl","invalid","touched","errors","required","minlength","requiredLength","maxlength","email","selectors","ResultadoService","http","getResultadoConcurso","loteria","concurso","get","env","HeaderLoteriaComponent","_resultadoService","ETipoJogo","Subject","EventEmitter","pipe","distinctUntilChanged","subscribe","carregaResultado","resultado","dezenas","ngOnChanges","jogo","toString","next","response","ultimoResultado","ultimo","emit","error","err","console","log","pularLinha","index","TabelaResultadoComponent","NotFoundDataComponent","PageHeaderComponent","filtrar","termo","pesquisar","EEventosLocais","BaseResourceFormComponent","injecto","resource","resourceService","route","ActivatedRoute","router","Router","formBuilder","FormBuilder","setCurrentAction","buildResourceForm","loadResource","ngAfterContentChecked","setPageTitle","submitForm","resourceForm","value","currentAction","id","update","toastr","timeOut","progressBar","closeButton","navigate","snapshot","parent","url","path","insert","length","idResource","Number","getById","patchValue","carregamentoDeDados","pageTitle","createPageTitle","editionPageTitle","RulesService","temPermissao","rule","token","localStorage","getItem","ELocalStorage","ROLES","AuthUtils","Object","find","permissao","BaseResourceListComponent","_fuseConfirmationService","FuseConfirmationService","_matPaginatorIntl","MatPaginatorIntl","_ruleService","carregaInformacoesResource","itemsPerPageLabel","setPageSizeOptions","setPageSizeOptionsInput","pageSizeOptions","split","map","str","getAll","filtro","pagina","direcaoOrdenacao","tamanho","ordenarPor","data","resources","content","totalElements","pageSize","size","excluir","open","title","message","icon","show","name","color","actions","confirm","label","cancel","dismissible","afterClosed","result","delete","res","paginacao","event","pageIndex","filtrarResource","validaPermissao","BaseResourceModel","_MatProgressSpinnerBase","mixinColor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","MatProgressSpinner","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","_diameter","_value","_resizeSubscription","Subscription","mode","trackedDiameters","_diameters","_spinnerAnimationLabel","_getSpinnerAnimationLabel","has","head","set","Set","_noopAnimations","_forceAnimations","nativeElement","nodeName","toLowerCase","defaultColor","strokeWidth","isBrowser","SAFARI","change","run","markForCheck","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","newValue","Math","max","min","element","_getShadowRoot","classList","add","ngOnDestroy","unsubscribe","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","_getCircleTransformOrigin","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","WeakMap","ɵfac","i1","DOCUMENT","ANIMATION_MODULE_TYPE","i2","ɵcmp","decls","i3","styles","MatProgressSpinnerModule","ɵmod","ɵinj","MatCommonModule","CommonModule"],"sourceRoot":"webpack:///","sources":["./src/app/modules/perfil/api/perfil.service.ts","./src/app/modules/permissao/api/permissao.service.ts","./src/app/shared/components/form-field-error/form-field-error.component.ts","./src/app/shared/services/resultado.service.ts","./src/app/shared/components/loteria/header-loteria/header-loteria.component.html","./src/app/shared/components/loteria/header-loteria/header-loteria.component.ts","./src/app/shared/components/loteria/tabela-resultado/tabela-resultado.component.html","./src/app/shared/components/loteria/tabela-resultado/tabela-resultado.component.ts","./src/app/shared/components/not-found-data/not-found-data.component.ts","./src/app/shared/components/not-found-data/not-found-data.component.html","./src/app/shared/components/page-header/page-header.component.html","./src/app/shared/components/page-header/page-header.component.ts","./src/app/shared/models/eventos.enum.ts","./src/app/shared/containers/base-resource-form/BaseResourceFormComponent.ts","./src/app/shared/services/rules.service.ts","./src/app/shared/containers/base-resource-list/base-resource-list.component.ts","./src/app/shared/models/base-resource.model.ts","./src/app/shared/models/interface.model.ts","./node_modules/@angular/material/fesm2020/progress-spinner.mjs"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { PerfilResponse, Perfil } from '../models/perfil.model';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PerfilService extends BaseResourceService<Perfil, PerfilResponse> {\n  constructor(protected injector: Injector) {\n    super('/perfils', injector);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\nimport { Permissao, PermissaoResponse } from '../permissao.mode';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PermissaoService extends BaseResourceService<\n  Permissao,\n  PermissaoResponse\n> {\n  constructor(protected injector: Injector) {\n    super('/permissoes', injector);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-form-field-error',\n  template: `<p class=\"text-on-warn-400 m-2 text-1xl\">{{ errorMensage }}</p>`,\n})\nexport class FormFieldErrorComponent implements OnInit {\n  @Input('form-control') formControl: FormControl;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get errorMensage(): string | null {\n    return this.mostraMensagemDeErro() ? this.getMessageError() : null;\n  }\n\n  private mostraMensagemDeErro(): boolean {\n    return this.formControl.invalid && this.formControl.touched;\n  }\n\n  private getMessageError(): string | null {\n    if (this.formControl.errors.required) {\n      return 'Dado Obrigatório';\n    } else if (this.formControl.errors.minlength) {\n      const requiredLength = this.formControl.errors.minlength.requiredLength;\n      return `Deve ter no minimo ${requiredLength} caracteres`;\n    } else if (this.formControl.errors.maxlength) {\n      const requiredLength = this.formControl.errors.maxlength.requiredLength;\n      return `Deve ter no máximo ${requiredLength} caracteres`;\n    } else if (this.formControl.errors.email) {\n      return 'Formato de e-mail inválido';\n    } else {\n      return null;\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment as env } from 'environments/environment';\nimport { Observable } from 'rxjs';\nimport { IResultado } from '../models/interface.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ResultadoService {\n  constructor(private http: HttpClient) {}\n\n  getResultadoConcurso(\n    loteria: string,\n    concurso: number | string\n  ): Observable<IResultado> {\n    return this.http.get<IResultado>(\n      `${env.apiResultados}/${loteria}/${concurso}`\n    );\n  }\n}\n","<!-- Header -->\n<div class=\"relative flex-0 py-5 overflow-hidden bg-{{jogo}}-100\">\n  <!-- Background - @formatter:off -->\n  <!-- Rings -->\n  <svg class=\"absolute inset-0 pointer-events-none\" viewBox=\"0 0 960 540\" width=\"100%\" height=\"100%\"\n    preserveAspectRatio=\"xMidYMax slice\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g class=\"text-gray-700 opacity-25\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"100\">\n      <circle r=\"234\" cx=\"196\" cy=\"23\"></circle>\n      <circle r=\"234\" cx=\"790\" cy=\"491\"></circle>\n    </g>\n  </svg>\n  <!-- @formatter:on -->\n  <div class=\"z-10 relative flex flex-col items-center\">\n    <div class=\"mt-1 text-4xl sm:text-7xl font-extrabold tracking-tight leading-tight text-center text-white\">\n      {{ titulo }}\n    </div>\n    <div class=\"max-w-2xl mt-6 sm:text-2xl text-center tracking-tight text-secondary\">\n      <h2 class=\"text-xl font-semibold text-white\">\n        Concurso: {{ resultado.concurso }} – {{ resultado.data }}\n      </h2>\n      <div class=\"h-[35%] w-full mb-5 pt-3 flex flex-col items-center justify-center\">\n        <p class=\"flex flex-wrap justify-around w-full\">\n          <ng-container *ngFor=\"let numero of resultado?.dezenas; let i = index\">\n            <div class=\"basis-[100%] h-0\" *ngIf=\"pularLinha(i)\"></div>\n            <div class=\"item rounded-full m-1 bg-white w-9 h-9 flex items-center justify-center font-bold text-2xl\">\n              {{ numero }}\n            </div>\n          </ng-container>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ETipoJogo, IResultado } from 'app/shared/models/interface.model';\nimport { ResultadoService } from 'app/shared/services/resultado.service';\nimport { Subject, distinctUntilChanged } from 'rxjs';\n\n@Component({\n  selector: 'app-header-loteria',\n  templateUrl: './header-loteria.component.html',\n  styleUrls: ['./header-loteria.component.scss'],\n})\nexport class HeaderLoteriaComponent implements OnInit, OnChanges {\n  @Input('jogo') jogo: ETipoJogo = ETipoJogo.LOTOFACIL;\n  @Input('titulo') titulo = 'Lotofácil';\n  @Input('concurso') concurso = new Subject<string>();\n\n  @Output() ultimo = new EventEmitter();\n\n  ultimoResultado: number = 0;\n\n  resultado: IResultado = {} as IResultado;\n\n  constructor(private _resultadoService: ResultadoService) {\n    this.concurso.pipe(distinctUntilChanged()).subscribe(() => {\n      this.carregaResultado();\n    });\n  }\n\n  ngOnInit(): void {\n    this.resultado.dezenas = [];\n    this.carregaResultado();\n  }\n  ngOnChanges(): void {\n    this.resultado.dezenas = [];\n    this.carregaResultado();\n  }\n\n  carregaResultado(): void {\n    this._resultadoService\n      .getResultadoConcurso(this.jogo, this.concurso.toString())\n      .subscribe({\n        next: (response) => {\n          this.resultado = response;\n          if (this.ultimoResultado === 0) {\n            this.ultimoResultado = response.concurso;\n          }\n          this.ultimo.emit(this.resultado);\n        },\n        error: (err) => console.log(err),\n      });\n    return;\n  }\n\n  pularLinha(index: number): boolean {\n    if (index === 0) return false;\n\n    if (this.jogo === 'timemania' || this.jogo === 'dia-de-sorte') {\n      if (index == 4) return true;\n      return false;\n    }\n\n    if (this.jogo === 'super-sete') return false;\n\n    if (this.jogo === 'mega-sena') return false;\n\n    if (this.jogo === 'dupla-sena' && index == 6) return true;\n\n    if (this.jogo === 'dupla-sena' && index != 6) return false;\n\n    if (index % 5 == 0) return true;\n\n    return false;\n  }\n}\n","<div class=\"flex flex-col h-full\">\n\n  <div class=\"flex flex-col flex-auto w-full mx-auto\" *ngIf=\"resultado?.premiacoes\">\n    <div class=\"relative overflow-x-auto shadow-md sm:rounded-lg\">\n      <table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n        <thead class=\"text-xs text-gray-700 uppercase dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" class=\"px-6 py-3 bg-gray-200 dark:bg-gray-800\">\n              Premiações\n            </th>\n            <th scope=\"col\" class=\"px-6 py-3 bg-gray-200 dark:bg-gray-800 border-l border-gray-300\">\n              Ganhadores\n            </th>\n            <th scope=\"col\" class=\"px-6 py-3 bg-gray-200 dark:bg-gray-800 border-l border-gray-300\">\n              Prêmios\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr class=\"border-b border-gray-200 dark:border-gray-700\" *ngFor=\"let premiacao of resultado?.premiacoes\">\n            <th scope=\"row\"\n              class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800\">\n              {{ premiacao?.acertos }}\n            </th>\n            <td class=\"px-6 py-4\">\n              {{ premiacao?.vencedores }}\n            </td>\n            <td class=\"px-6 py-4 bg-gray-50 dark:bg-gray-800\">\n              R$ {{ premiacao?.premio }}\n            </td>\n          </tr>\n\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <div class=\"flex flex-col flex-auto w-full mx-auto mt-3\" *ngIf=\"resultado?.estadosPremiados?.length > 0\">\n    <div class=\"relative overflow-x-auto shadow-md sm:rounded-lg\">\n      <table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n        <thead class=\"text-xs text-gray-700 uppercase dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" colspan=\"3\"\n              class=\"text-center px-6 py-3 bg-gray-200 dark:bg-gray-800 border-b border-gray-300\">\n              Ganhadores por Estado\n            </th>\n          </tr>\n          <tr>\n            <th scope=\"col\" class=\"text-center px-6 py-3 bg-gray-200 dark:bg-gray-800 border-gray-300\">\n              Estado\n            </th>\n            <th scope=\"col\" class=\"text-center px-6 py-3 bg-gray-200 dark:bg-gray-800 border-l border-gray-300\">\n              Ganhadores\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr class=\"border-b border-gray-200 dark:border-gray-700\" *ngFor=\"let estado of resultado?.estadosPremiados\">\n            <th scope=\"row\"\n              class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800\">\n              {{ estado?.nome }} ({{ estado?.uf }})\n            </th>\n            <td class=\"px-6 py-4\">\n              {{ estado?.vencedores }}\n            </td>\n          </tr>\n\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { IResultado } from 'app/shared/models/interface.model';\n\n@Component({\n  selector: 'app-tabela-resultado',\n  templateUrl: './tabela-resultado.component.html',\n  styleUrls: ['./tabela-resultado.component.scss'],\n})\nexport class TabelaResultadoComponent implements OnInit {\n  @Input('resultado') resultado: IResultado = {} as IResultado;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found-data',\n  templateUrl: './not-found-data.component.html',\n  styleUrls: ['./not-found-data.component.scss'],\n})\nexport class NotFoundDataComponent {\n  @Input('mensagem') mensagem: string;\n}\n","<div class=\"flex flex-col w-full h-full items-center justify-center border-t-2 border-gray-200\">\n  <img src=\"assets/icons/searching.svg\" class=\"w-64 h-64\" alt=\"\">\n  <p class=\"mt-2 text-lg md:text-2xl font-medium tracking-tight text-center text-secondary\">{{ mensagem }}</p>\n</div>\n","<div\n  class=\"relative flex flex-col flx-col-0 sm:flex-row flex-0 sm:items-center sm:justify-between py-8 px-6 md:px-8 border-b\">\n  <div class=\"text-4xl font-extrabold tracking-tight\">{{ pageTitle }}</div>\n\n  <div class=\"flex flex-col sm:flex-row items-start shrink-0 sm:items-center mt-6 sm:mt-0 sm:ml-4\">\n    <mat-form-field class=\"fuse-mat-dense fuse-mat-no-subscript fuse-mat-rounded min-w-64\" *ngIf=\"showSearch\">\n      <mat-icon class=\"icon-size-5\" matPrefix [svgIcon]=\"'heroicons_solid:search'\"></mat-icon>\n      <input matInput id=\"searchPerfil\" #temoPesquisa (keyup)=\"filtrar(temoPesquisa.value)\" [autocomplete]=\"'off'\"\n        [placeholder]=\"placeholder\" />\n    </mat-form-field>\n    <!-- Add product button -->\n    <a [routerLink]=\"['novo']\" routerLinkActive=\"router-link-active\" *ngIf=\"showButton\"\n      class=\"mat-focus-indicator mt-2 fuse-mat-button-rounded mat-flat-button mat-button-base mat-accent m-1 text-1xl\"\n      mat-flat-button>\n      <span class=\"p-3 flex flex-row items-center\">\n        <mat-icon class=\"icon-size-5\" [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\n        Cadastrar\n      </span>\n    </a>\n  </div>\n</div>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-page-header',\n  templateUrl: './page-header.component.html',\n  styleUrls: ['./page-header.component.scss'],\n})\nexport class PageHeaderComponent implements OnInit {\n  @Input('page-title') pageTitle: string = '';\n  @Input('show-button') showButton: boolean = true;\n  @Input('show-search') showSearch: boolean = true;\n  @Input('placeholder-text') placeholder: string = '';\n\n  @Output() pesquisar = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  filtrar(termo: string): void {\n    this.pesquisar.emit(termo);\n  }\n}\n","export enum EEventosLocais {\n  CARREGAMENTO_DADOS_API = 'carregamento-dados-api',\n}\n","import {\n  AfterContentChecked,\n  Component,\n  EventEmitter,\n  Inject,\n  Injector,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport toastr from 'toastr';\n\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\nimport { EEventosLocais } from 'app/shared/models/eventos.enum';\n\n@Component({\n  template: '',\n})\nexport abstract class BaseResourceFormComponent<T extends BaseResourceModel, R>\n  implements OnInit, AfterContentChecked\n{\n  currentAction: string;\n  resourceForm: UntypedFormGroup;\n  pageTitle: string;\n\n  protected route: ActivatedRoute;\n  protected router: Router;\n  protected formBuilder: FormBuilder;\n\n  carregamentoDeDados = new EventEmitter()\n\n  constructor(\n    protected injecto: Injector,\n    @Inject('resource') protected resource: T,\n    protected resourceService: BaseResourceService<T, R>\n  ) {\n    this.route = this.injecto.get(ActivatedRoute);\n    this.router = this.injecto.get(Router);\n    this.formBuilder = this.injecto.get(FormBuilder);\n  }\n\n  ngOnInit(): void {\n    this.setCurrentAction();\n    this.buildResourceForm();\n    this.loadResource();\n  }\n\n  ngAfterContentChecked(): void {\n    this.setPageTitle();\n  }\n\n  submitForm() {\n    if (this.resourceForm.invalid) {\n      return;\n    }\n\n    const resource: T = this.resourceForm.value;\n    if (this.currentAction === 'novo') {\n      this.resourceService.insert(resource).subscribe(\n        () => {\n          toastr.success('Dado cadastrado com sucesso!', 'Sucesso', {\n            timeOut: 10000,\n            progressBar: true,\n            closeButton: true,\n          });\n          const baseComponentPath: string =\n            this.route.snapshot.parent.url[0].path;\n\n          this.router.navigate([baseComponentPath]);\n        },\n        (error) => {\n          toastr.error(\n            'Não foi possível carregar os dados',\n            error.error.error,\n            {\n              timeOut: 10000,\n              progressBar: true,\n              closeButton: true,\n            }\n          );\n        }\n      );\n      return;\n    }\n\n    resource.id = this.resource.id;\n    this.resourceService.update(resource).subscribe(\n      () => {\n        toastr.success('Dado atualizado com sucesso!', 'Sucesso', {\n          timeOut: 10000,\n          progressBar: true,\n          closeButton: true,\n        });\n        const baseComponentPath: string =\n          this.route.snapshot.parent.url[0].path;\n\n        this.router.navigate([baseComponentPath]);\n      },\n      (error) => {\n        toastr.error('Não foi possível atualizar o dado', error.error.error, {\n          timeOut: 10000,\n          progressBar: true,\n          closeButton: true,\n        });\n      }\n    );\n  }\n\n  // PRIVATE METHODS\n  protected setCurrentAction() {\n    if (this.route.snapshot.url[this.route.snapshot.url.length - 1]?.path === 'novo') {\n      this.currentAction = 'novo';\n    } else {\n      this.currentAction = 'editar';\n    }\n  }\n\n  protected loadResource() {\n    if (this.currentAction === 'editar') {\n      const idResource = Number(\n        this.route.snapshot.url[this.route.snapshot.url.length - 2]?.path\n      );\n      this.resourceService.getById(idResource).subscribe(\n        (resource) => {\n          this.resource = resource;\n          this.resourceForm.patchValue(this.resource);\n          this.carregamentoDeDados.emit(EEventosLocais.CARREGAMENTO_DADOS_API)\n        },\n        (error) => {\n          toastr.error(\n            'Não foi possível carregar os dados',\n            error.error.error,\n            {\n              timeOut: 10000,\n              progressBar: true,\n              closeButton: true,\n            }\n          );\n        }\n      );\n    }\n  }\n\n  protected setPageTitle() {\n    if (this.currentAction === 'novo') {\n      this.pageTitle = this.createPageTitle();\n    } else {\n      this.pageTitle = this.editionPageTitle();\n    }\n  }\n\n  protected createPageTitle(): string {\n    return 'Novo';\n  }\n\n  protected editionPageTitle(): string {\n    return 'Edição';\n  }\n\n  protected abstract buildResourceForm(): void;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nimport { ELocalStorage } from '../models/localstorage.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RulesService {\n  constructor() {}\n\n  temPermissao(rule: string): boolean {\n    const token = localStorage.getItem(ELocalStorage.TOKEN);\n    if (!token) {\n      return false;\n    }\n\n    const { ROLES } = AuthUtils.decodeToken(token);\n\n    if (Object(ROLES).find((permissao) => permissao == rule)) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { MatPaginatorIntl, PageEvent } from '@angular/material/paginator';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\nimport { IFilter } from 'app/shared/models/interface.model';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\nimport { RulesService } from 'app/shared/services/rules.service';\nimport toastr from 'toastr';\n\n@Component({\n  template: '',\n})\nexport abstract class BaseResourceListComponent<T extends BaseResourceModel, R>\n  implements OnInit\n{\n  resources: T[] = [];\n\n  // MatPaginator Inputs\n  length = 0;\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 25, 100];\n\n  // MatPaginator Output\n  pageEvent: PageEvent;\n  protected _fuseConfirmationService: FuseConfirmationService;\n  protected _matPaginatorIntl: MatPaginatorIntl;\n  protected _ruleService: RulesService;\n\n  constructor(\n    protected injecto: Injector,\n    protected resourceService: BaseResourceService<T, R>\n  ) {\n    this._fuseConfirmationService = this.injecto.get(FuseConfirmationService);\n    this._matPaginatorIntl = this.injecto.get(MatPaginatorIntl);\n    this._ruleService = this.injecto.get(RulesService);\n  }\n\n  ngOnInit(): void {\n    this.carregaInformacoesResource();\n    this._matPaginatorIntl.itemsPerPageLabel = 'Itens por página';\n  }\n\n  setPageSizeOptions(setPageSizeOptionsInput: string) {\n    if (setPageSizeOptionsInput) {\n      this.pageSizeOptions = setPageSizeOptionsInput\n        .split(',')\n        .map((str) => +str);\n    }\n  }\n\n  carregaInformacoesResource(): void {\n    const filtro: IFilter = {\n      filtro: '',\n      pagina: 0,\n      direcaoOrdenacao: 'DESC',\n      tamanho: 10,\n      ordenarPor: 'id',\n    };\n    this.resourceService.getAll(filtro).subscribe((data) => {\n      this.resources = data['content'];\n      this.length = data['totalElements'];\n      this.pageSize = data['size'];\n    });\n  }\n\n  excluir(resource: T): void {\n    const dialogRef = this._fuseConfirmationService.open({\n      title: `Deseja realmente excluir o item: ${resource.id}?`,\n      message: '',\n      icon: {\n        show: true,\n        name: 'heroicons_outline:exclamation',\n        color: 'warn',\n      },\n      actions: {\n        confirm: {\n          show: true,\n          label: 'Confirmar',\n          color: 'warn',\n        },\n        cancel: {\n          show: true,\n          label: 'Cancelar',\n        },\n      },\n      dismissible: false,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 'confirmed') {\n        this.resourceService.delete(resource.id).subscribe(\n          (res) => {\n            toastr.success(`Item excluído com sucesso!`, '', {\n              timeOut: 10000,\n              progressBar: true,\n              closeButton: true,\n            });\n            this.carregaInformacoesResource();\n          },\n          (error) => {\n            toastr.error(\n              'Não foi possível excluir o perfil',\n              error.error.error,\n              {\n                timeOut: 10000,\n                progressBar: true,\n                closeButton: true,\n              }\n            );\n          }\n        );\n      }\n    });\n  }\n\n  paginacao(event: Event): void {\n    this.pageSize = event['pageSize'];\n    const filtro: IFilter = {\n      filtro: '',\n      pagina: event['pageIndex'],\n      direcaoOrdenacao: 'DESC',\n      tamanho: this.pageSize,\n      ordenarPor: 'id',\n    };\n\n    this.resourceService.getAll(filtro).subscribe((data) => {\n      this.resources = data['content'];\n      this.length = data['totalElements'];\n      this.pageSize = data['size'];\n    });\n  }\n\n  filtrarResource(termo: string): void {\n    const filtro: IFilter = {\n      filtro: termo,\n      pagina: 0,\n      direcaoOrdenacao: 'DESC',\n      tamanho: 10,\n      ordenarPor: 'id',\n    };\n    this.resourceService.getAll(filtro).subscribe((data) => {\n      this.resources = data['content'];\n      this.length = data['totalElements'];\n      this.pageSize = data['size'];\n    });\n  }\n\n  validaPermissao(rule: string): boolean {\n    return this._ruleService.temPermissao(rule);\n  }\n}\n","export abstract class BaseResourceModel {\n  id?: number;\n}\n","export interface IFilter {\n  filtro: string;\n  pagina: number;\n  tamanho: number;\n  ordenarPor: string;\n  direcaoOrdenacao: 'ASC' | 'DESC';\n}\n\nexport interface IResultado {\n  loteria: string;\n  nome: string;\n  concurso: number;\n  data: string;\n  local: string;\n  dezenas: number[];\n  premiacoes: IPremiacao[];\n  estadosPremiados: IEstadosPremiados[];\n  acumulou: true;\n  acumuladaProxConcurso: string;\n  dataProxConcurso: string;\n  proxConcurso: number;\n  timeCoracao: string;\n  mesSorte: string;\n}\n\nexport interface IPremiacao {\n  acertos: string;\n  vencedores: number;\n  premio: string;\n}\n\nexport interface IEstadosPremiados {\n  nome: string;\n  uf: string;\n  vencedores: string;\n  latitude: string;\n  longitude: string;\n  cidades: [];\n}\n\nexport interface ICidades {\n  cidade: string;\n  vencedores: string;\n  latitude: string;\n  longitude: string;\n}\n\nexport enum ETipoJogo {\n  DUPLA_SENA = 'dupla-sena',\n  LOTOFACIL = 'lotofacil',\n  LOTO_MANIA = 'lotomania',\n  QUINA = 'quina',\n  MEGA_SENA = 'mega-sena',\n  TIME_MANIA = 'timemania',\n  DIA_DE_SORTE = 'dia-de-sorte',\n  SUPER_SETE = 'super-sete',\n}\n\nexport interface ITipoCardJogos {\n  tipo: string;\n  titulo: string;\n  descricao: string;\n  rota: string;\n  cor: string;\n}\n\nexport interface INumerosCartela {\n  numero: number;\n  selecionado: boolean;\n}\n\nexport interface ICartela {\n  cartela: INumerosCartela[];\n  selecionados: number[];\n}\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = (svg.currentScale ?? 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"], dependencies: [{ kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }]; }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [MatCommonModule, CommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import `MatProgressSpinner` instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"x_google_ignoreList":[18]}