{"version":3,"file":"864.812b27acbbb361e5.js","mappings":"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","names":["UsuarioService","BaseResourceService","constructor","injector","super","this","i0","factory","ɵfac","UsuarioListComponent","BaseResourceListComponent","usuarioService","selectors","ctx","Usuario","BaseResourceModel","id","nome","email","senha","cpf","login","dataNascimento","imagem","status","perfilId","perfil","value","error","reject","info","resolve","Promise","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","EventEmitter","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatchLength","_compareOrIncludes","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","withoutDays","monthsCount","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","filter","idx","isDecimalMarker","inputLength","comparedValue","excludedValue","some","index","ɵprov","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","toLocaleString","useGrouping","maximumFractionDigits","String","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","then","setProperty","checkSpecialCharAmount","_removeMask","_removeSuffix","_removePrefix","concat","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","emit","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onClick","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","args","asyncGeneratorStep","_next","_asyncToGenerator","_this","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","ɵdir","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","_configFactory","initConfig","configValue","Function","NgxMaskModule","static","ngModule","providers","useValue","useFactory","deps","ɵmod","ɵinj","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init","UsuarioFormComponent","BaseResourceFormComponent","perfilService","ngOnInit","setTimeout","carregaPerfils","buildResourceForm","resourceForm","formBuilder","group","Validators","senhaConfirmacao","matchValidator","getAll","filtro","pagina","direcaoOrdenacao","tamanho","ordenarPor","subscribe","perfils","content","patchValue","resource","err","toastr","timeOut","progressBar","closeButton","createPageTitle","editionPageTitle","matchTo","reverse","control","parent","controls","updateValueAndValidity","matching","routes","path","component","MY_DATE_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","UsuarioModule","MAT_DATE_FORMATS","imports","CommonModule","RouterModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/modules/usuario/api/usuario.service.ts","./src/app/modules/usuario/containers/usuario-list/usuario-list.component.html","./src/app/modules/usuario/containers/usuario-list/usuario-list.component.ts","./src/app/modules/usuario/model/usuario.model.ts","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","./node_modules/ngx-mask/fesm2020/ngx-mask.mjs","./src/app/modules/usuario/containers/usuario-form/usuario-form.component.html","./src/app/modules/usuario/containers/usuario-form/usuario-form.component.ts","./src/app/modules/usuario/usuario.module.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\nimport { Usuario, UsuarioResponse } from '../model/usuario.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsuarioService extends BaseResourceService<\n  Usuario,\n  UsuarioResponse\n> {\n  constructor(protected injector: Injector) {\n    super('/usuarios', injector);\n  }\n}\n","<div class=\"absolute inset-0 flex flex-col min-w-0 overflow-hidden bg-card dark:bg-transparent\">\n  <div class=\"flex flex-col flex-auto min-w-0 overflow-y-auto\" cdkScrollable>\n    <app-page-header [show-button]=\"validaPermissao('MANTER_USUARIO')\" page-title=\"Usuários\"\n      placeholder-text=\"Buscar por nome\" (pesquisar)=\"filtrarResource($event)\">\n    </app-page-header>\n\n    <!-- Page body -->\n    <div class=\"flex flex-col flex-auto min-w-0 overflow-y-auto\" cdkScrollable *ngIf=\"length > 0\">\n      <mat-table [dataSource]=\"resources\">\n        <!-- User name Definition -->\n        <ng-container matColumnDef=\"id\">\n          <mat-header-cell *matHeaderCellDef> Código </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\"> {{ row.id }} </mat-cell>\n        </ng-container>\n\n        <!-- NOME -->\n        <ng-container matColumnDef=\"nome\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Nome </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.nome }}\n          </mat-cell>\n        </ng-container>\n\n        <!-- E-MAIL -->\n        <ng-container matColumnDef=\"email\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> E-mail </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.email }}\n          </mat-cell>\n        </ng-container>\n\n        <!-- DATA NASCIMENTO -->\n        <ng-container matColumnDef=\"dataNascimento\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> data Nascimento </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.dataNascimento | date: 'd/MM/Y' }}\n          </mat-cell>\n        </ng-container>\n\n        <!-- STATUS -->\n        <ng-container matColumnDef=\"status\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            <span class=\"font-bold text-sm px-2.5 py-0.5 rounded-full\" [ngClass]=\"{'bg-blue-200 text-blue-800 dark:bg-blue-600 dark:text-blue-50': row.status,\n                          'bg-rose-200 text-rose-800 dark:bg-rose-600 dark:text-rose-50': !row.status}\">\n              {{ row.status ? 'Ativado' : 'Desativado'}}\n            </span>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"acoes\">\n          <mat-header-cell *matHeaderCellDef> Ações </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            <span *ngIf=\"!validaPermissao('MANTER_USUARIO')\">-</span>\n            <span class=\"mr-2 cursor-pointer\" [routerLink]=\"[row.id, 'editar']\" *ngIf=\"validaPermissao('MANTER_USUARIO')\">\n              <mat-icon class=\"text-accent dark:text-accent-300\" svgIcon=\"heroicons_outline:pencil-alt\"></mat-icon>\n            </span>\n            <span (click)=\"excluir(row)\" class=\"cursor-pointer\" *ngIf=\"validaPermissao('MANTER_USUARIO')\">\n              <mat-icon class=\"text-warn-600\" svgIcon=\"heroicons_outline:trash\"></mat-icon>\n            </span>\n          </mat-cell>\n        </ng-container>\n\n        <!-- Header and Row Declarations -->\n        <mat-header-row *matHeaderRowDef=\"['id', 'nome', 'email', 'dataNascimento', 'status', 'acoes']\">\n        </mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: ['id', 'nome', 'email', 'dataNascimento', 'status', 'acoes']\"></mat-row>\n      </mat-table>\n    </div>\n\n    <!-- NENHUM DADO ENCONTRADO -->\n    <app-not-found-data class=\"h-full\" mensagem=\"Nenhum registro de usuários encontrado!\" *ngIf=\"length <= 0\">\n    </app-not-found-data>\n  </div>\n  <div class=\"flex flex-0 flex-col\" *ngIf=\"length > 0\">\n    <mat-paginator class=\"flex justify-end border-t\" [length]=\"length\" [pageSize]=\"pageSize\"\n      [pageSizeOptions]=\"pageSizeOptions\" (page)=\"paginacao($event)\" aria-label=\"Select page\">\n    </mat-paginator>\n  </div>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { BaseResourceListComponent } from 'app/shared/containers/base-resource-list/base-resource-list.component';\nimport { UsuarioService } from '../../api/usuario.service';\nimport { Usuario, UsuarioResponse } from '../../model/usuario.model';\n\n@Component({\n  selector: 'app-usuario-list',\n  templateUrl: './usuario-list.component.html',\n  styleUrls: ['./usuario-list.component.scss'],\n})\nexport class UsuarioListComponent extends BaseResourceListComponent<\n  Usuario,\n  UsuarioResponse\n> {\n  constructor(\n    protected injector: Injector,\n    protected usuarioService: UsuarioService\n  ) {\n    super(injector, usuarioService);\n  }\n}\n","import { Perfil } from 'app/modules/perfil/models/perfil.model';\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\n\nexport class Usuario extends BaseResourceModel {\n  constructor(\n    public id?: number,\n    public nome?: string,\n    public email?: string,\n    public senha?: string | null,\n    public cpf?: string,\n    public login?: string,\n    public dataNascimento?: string,\n    public imagem?: string,\n    public status?: number,\n    public perfilId?: number,\n    public perfil?: Perfil\n  ) {\n    super();\n  }\n}\n\nexport class UsuarioResponse {\n  constructor(\n    public content?: Usuario[],\n    public totalElements?: number,\n    public size?: number,\n    public numberOfElements?: number\n  ) {}\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? '';\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0] ?? '';\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    i !== this.suffix?.length - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx) ?? [];\n                const precisionMatchLength = precisionMatch[0]?.length ?? 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            const valuesIP = inputValue.split('.');\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i] ?? '');\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    inputValue[1] !== this.thousandSeparator &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? '') {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') &&\n                    maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '')) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor] ?? '') !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor] ?? ''] &&\n                    this.maskAvailablePatterns[maskExpression[cursor] ?? '']?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/)) {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? '') !==\n                -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith('separator')\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern\n            ? this.customPattern\n            : this.maskAvailablePatterns;\n        return ((this.maskAvailablePatterns[maskSymbol]?.pattern &&\n            this.maskAvailablePatterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === '' || Number(value) > 255;\n                }\n                return value === '' || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n}\nMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService, deps: [{ token: config }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; } });\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.triggerOnMaskChange = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? inputValue[this.selStart] ?? ''\n            : '';\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            if (this.showMaskTyped) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.removeMask(inputValue);\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        if (this.showMaskTyped) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length\n                    ? this.hideInput(result, this.maskExpression)\n                    : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index] ?? ''] &&\n                this.maskAvailablePatterns[maskExpression[index] ?? '']?.symbol) {\n                return this.maskAvailablePatterns[maskExpression[index] ?? '']?.symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res.split('').filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? '';\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.maskSpecialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1] ?? '') &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if (!value && value !== 0) {\n            return String(value);\n        }\n        return Number(value).toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        });\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask\n            .split('')\n            .filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), '.');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService, deps: [{ token: DOCUMENT }, { token: config }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; } });\n\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.triggerOnMaskChange = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, triggerOnMaskChange, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split('||')\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || '';\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters =\n                    this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key]?.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number((this._maskValue.split('{')[1] ?? '').split('}')[0]) -\n                        4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 &&\n                value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 &&\n                    value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === '' || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        this._position =\n            this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (!el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters?.length\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? '').toString()) &&\n                            ((this.prefix.length >= 1 &&\n                                el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey) ||\n            (e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    async writeValue(inputValue) {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n            if ('disable' in inputValue) {\n                this.setDisabledState(Boolean(inputValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.value;\n        }\n        if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService.numberToString(inputValue);\n            if (!Array.isArray(this.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue =\n                    this.decimalMarker !== '.'\n                        ? inputValue.replace('.', this.decimalMarker)\n                        : inputValue;\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if ((inputValue && this._maskService.maskExpression) ||\n            (this._maskService.maskExpression &&\n                (this._maskService.prefix || this._maskService.showMaskTyped))) {\n            // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n            this._maskService.writingValue = true;\n            this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n            ];\n            // Let the service know we've finished writing value\n            this._maskService.writingValue = false;\n        }\n        else {\n            this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split('')\n                .reduce((accum, currVal, index) => {\n                this._start = currVal === '{' ? index : this._start;\n                if (currVal !== '}') {\n                    return this._maskService._findSpecialChar(currVal)\n                        ? accum + currVal\n                        : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue\n            .split('')\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? '';\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression;\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskDirective, deps: [{ token: DOCUMENT }, { token: MaskService }, { token: config }], target: i0.ɵɵFactoryTarget.Directive });\nMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.8\", type: MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", triggerOnMaskChange: \"triggerOnMaskChange\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        MaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MaskService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; }, propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, deps: [{ token: MaskApplierService }], target: i0.ɵɵFactoryTarget.Pipe });\nMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: MaskApplierService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MaskDirective, MaskPipe],\n                    declarations: [MaskDirective, MaskPipe],\n                }]\n        }] });\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n","<div class=\"flex flex-col flex-auto min-w-0\">\n  <div class=\"flex-auto p-6 sm:p-10\">\n    <div class=\"bg-card rounded-2xl shadow overflow-hidden\">\n      <form [formGroup]=\"resourceForm\" class=\"m-4\">\n        <!-- Section -->\n        <div class=\"w-full\">\n          <div class=\"text-xl\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"flex flex-auto flex-wrap my-5\">\n          <div class=\"flex flex-col w-full sm:pl-8\">\n            <!-- Destinação -->\n            <div class=\"flex\">\n              <mat-form-field class=\"w-2/3 pr-2\">\n                <mat-label>Nome</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:user\"></mat-icon>\n                </span>\n                <input id=\"nome\" matInput formControlName=\"nome\" />\n              </mat-form-field>\n              <mat-form-field class=\"w-1/3 pl-2\">\n                <mat-label>CPF</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:user-circle\"></mat-icon>\n                </span>\n                <input id=\"cpf-titular\" matInput mask=\"000.000.000-00\" formControlName=\"cpf\" />\n              </mat-form-field>\n            </div>\n\n            <!-- Dados do banco -->\n            <div class=\"flex\">\n\n              <mat-form-field class=\"w-1/3 pr-2\">\n                <mat-label>Data Nascimento</mat-label>\n                <input matInput formControlName=\"dataNascimento\" [matDatepicker]=\"data_nascimento\">\n                <mat-datepicker-toggle matPrefix [for]=\"data_nascimento\"></mat-datepicker-toggle>\n                <mat-datepicker #data_nascimento></mat-datepicker>\n              </mat-form-field>\n\n              <mat-form-field class=\"w-1/3 px-2\">\n                <mat-label>Senha</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:lock-closed\"></mat-icon>\n                </span>\n                <input id=\"senha\" matInput type=\"password\" formControlName=\"senha\" />\n              </mat-form-field>\n              <mat-form-field class=\"w-1/3 pr-2\">\n                <mat-label>Confirmação de Senha</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:lock-closed\"></mat-icon>\n                </span>\n                <input id=\"senha-confirmacao\" matInput type=\"password\" formControlName=\"senhaConfirmacao\" />\n              </mat-form-field>\n            </div>\n\n            <!-- Dados da conta -->\n            <div class=\"flex\">\n              <mat-form-field class=\"w-1/2 pr-2\">\n                <mat-label>Login</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:user\"></mat-icon>\n                </span>\n                <input id=\"login\" matInput type=\"text\" formControlName=\"login\" />\n              </mat-form-field>\n              <mat-form-field class=\"w-1/2 pl-2\">\n                <mat-label>E-mail</mat-label>\n                <span matPrefix>\n                  <mat-icon svgIcon=\"heroicons_outline:mail\"></mat-icon>\n                </span>\n                <input id=\"email\" type=\"text\" matInput formControlName=\"email\" />\n              </mat-form-field>\n            </div>\n\n            <div class=\"flex\">\n\n              <mat-form-field class=\"w-2/3 pr-2\">\n                <mat-label>Perfil</mat-label>\n                <mat-select id=\"perfilId\" formControlName=\"perfilId\">\n                  <mat-option *ngFor=\"let perfil of perfils\" [value]=\"perfil.id\">{{ perfil.nome }}</mat-option>\n                </mat-select>\n                <mat-icon class=\"icon-size-5\" matPrefix [svgIcon]=\"'heroicons_outline:document-text'\"></mat-icon>\n              </mat-form-field>\n\n\n              <div class=\"w-1/3 pl-2\">\n                <div class=\"w-full pl-2 flex flex-col mt-1 ml-5\">\n                  <mat-label>Status</mat-label>\n                  <mat-slide-toggle color=\"primary\" class=\"mt-3\" [(ngModel)]=\"status\" formControlName=\"status\">\n                    {{ status ? 'Ativado' : 'Desativado' }}\n                  </mat-slide-toggle>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Divider -->\n        <div class=\"mt-11 mb-10 border-t\"></div>\n\n        <!-- Actions -->\n        <div class=\"flex items-center justify-end\">\n          <a routerLink=\"/usuario\" routerLinkActive=\"router-link-active\">\n            <button class=\"fuse-mat-button-rounded mat-flat-button mat-button-base\" mat-stroked-button type=\"button\">\n              Cancelar\n            </button>\n          </a>\n\n          <button class=\"ml-4 fuse-mat-button-rounded mat-flat-button mat-button-base mat-primary\" mat-flat-button\n            type=\"button\" [disabled]=\"resourceForm.invalid\" (click)=\"submitForm()\">\n            Salvar\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { PerfilService } from 'app/modules/perfil/api/perfil.service';\nimport { Perfil } from 'app/modules/perfil/models/perfil.model';\nimport { BaseResourceFormComponent } from 'app/shared/containers/base-resource-form';\nimport { IFilter } from 'app/shared/models/interface.model';\nimport { UsuarioService } from '../../api/usuario.service';\nimport { Usuario, UsuarioResponse } from '../../model/usuario.model';\nimport toastr from 'toastr';\n\n@Component({\n  selector: 'app-usuario-form',\n  templateUrl: './usuario-form.component.html',\n  styleUrls: ['./usuario-form.component.scss'],\n})\nexport class UsuarioFormComponent\n  extends BaseResourceFormComponent<Usuario, UsuarioResponse>\n  implements OnInit\n{\n  status: number = 0;\n\n  perfils: Perfil[] = [];\n\n  constructor(\n    protected usuarioService: UsuarioService,\n    protected injector: Injector,\n    protected perfilService: PerfilService\n  ) {\n    super(injector, new Usuario(), usuarioService);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    setTimeout(() => {\n      this.carregaPerfils();\n    }, 500);\n  }\n\n  protected buildResourceForm() {\n    this.resourceForm = this.formBuilder.group({\n      nome: [null, [Validators.required, Validators.minLength(2)]],\n      email: [null, [Validators.required, Validators.email]],\n      cpf: [null, [Validators.required, Validators.minLength(11)]],\n      login: [null, [Validators.required]],\n      dataNascimento: [null, [Validators.required]],\n      status: [null, [Validators.required]],\n      perfilId: [null, [Validators.required]],\n      senha: [null, [Validators.minLength(6)]],\n      senhaConfirmacao: [\n        null,\n        [Validators.minLength(6), this.matchValidator('senha')],\n      ],\n    });\n  }\n\n  protected carregaPerfils() {\n    const filtro: IFilter = {\n      filtro: '',\n      pagina: 0,\n      direcaoOrdenacao: 'DESC',\n      tamanho: 100,\n      ordenarPor: 'id',\n    };\n\n    this.perfilService.getAll(filtro).subscribe(\n      (perfils) => {\n        this.perfils = perfils.content;\n        this.resourceForm.patchValue({\n          perfilId: this.resource?.perfil?.id,\n        });\n      },\n      (err) =>\n        toastr.error('Não foi possível carregar os perfils', err.error.error, {\n          timeOut: 10000,\n          progressBar: true,\n          closeButton: true,\n        })\n    );\n  }\n\n  protected createPageTitle(): string {\n    return 'Cadastro de Novo Usuário';\n  }\n\n  protected editionPageTitle(): string {\n    const usuarioNome = this.resource.nome || '';\n    return 'Editando usuário: ' + usuarioNome;\n  }\n\n  protected matchValidator(matchTo: string, reverse?: boolean): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (control.parent && reverse) {\n        const c = (control.parent?.controls as any)[matchTo] as AbstractControl;\n        if (c) {\n          c.updateValueAndValidity();\n        }\n        return null;\n      }\n      return !!control.parent &&\n        !!control.parent.value &&\n        control.value === (control.parent?.controls as any)[matchTo].value\n        ? null\n        : { matching: true };\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Route, RouterModule } from '@angular/router';\nimport { UsuarioListComponent } from './containers/usuario-list/usuario-list.component';\nimport { UsuarioFormComponent } from './containers/usuario-form/usuario-form.component';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { MAT_DATE_FORMATS } from '@angular/material/core';\nimport { NgxMaskModule } from 'ngx-mask';\n\nconst routes: Route[] = [\n  { path: '', component: UsuarioListComponent },\n  { path: 'novo', component: UsuarioFormComponent },\n  { path: ':id/editar', component: UsuarioFormComponent },\n];\n\nexport const MY_DATE_FORMATS = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  declarations: [UsuarioListComponent, UsuarioFormComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule,\n    NgxMaskModule.forRoot(),\n  ],\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS }],\n})\nexport class UsuarioModule {}\n"],"x_google_ignoreList":[4,5]}