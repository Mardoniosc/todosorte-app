{"version":3,"file":"default-node_modules_angular_material_fesm2020_progress-spinner_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2020/progress-spinner.mjs"],"sourcesContent":["import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = (svg.currentScale ?? 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"], dependencies: [{ kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }]; }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [MatCommonModule, CommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import `MatProgressSpinner` instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"names":["coerceNumberProperty","i1","_getShadowRoot","i2","i3","DOCUMENT","CommonModule","i0","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Inject","Input","NgModule","mixinColor","MatCommonModule","ANIMATION_MODULE_TYPE","Subscription","MatProgressSpinner__svg_circle_2_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelement","ctx_r1","ɵɵnextContext","_r0","ɵɵreference","ɵɵstyleProp","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleTransformOrigin","ɵɵattribute","_getCircleRadius","MatProgressSpinner__svg_circle_3_Template","ctx_r2","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","constructor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","_diameter","_value","_resizeSubscription","EMPTY","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","set","Set","_noopAnimations","_forceAnimations","nativeElement","nodeName","toLowerCase","color","defaultColor","strokeWidth","isBrowser","SAFARI","change","subscribe","run","markForCheck","size","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","ngOnInit","element","classList","add","ngOnDestroy","unsubscribe","_getViewBox","viewBox","PI","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","WeakMap","ɵfac","MatProgressSpinner_Factory","t","ɵɵdirectiveInject","ElementRef","Platform","ChangeDetectorRef","ViewportRuler","NgZone","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","ɵɵclassProp","inputs","exportAs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatProgressSpinner_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","dependencies","NgSwitch","NgSwitchCase","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","OnPush","None","undefined","decorators","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","MatSpinner"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}